npm install --save :
- redux react-redux
- react-navigation
- react-navigation-stack 
- react-navigation-tabs 
- react-navigation-material-bottom-tabs 
- react-navigation-drawer
- react-navigation-header-buttons
- react-native-paper
- @react-native-community/masked-view
- react-native-safe-area-context
- react-native-screens
- redux-thunk
- expo-font
- expo-linear-gradient
- @expo/vector-icons
- react-native-elements
- simple-crypto-js

expo install :
- react-native-gesture-handler 
- react-native-reanimated
- expo-crypto

always remember to import React when using jsx!!

navigation :
    stack :
    - So pages and screens are basically managed on a stack of pages.
    - And whenever you go to a new screen it will be pushed on top of that stack at the topmost screen on a stack is always the screen which is visible.
    - And when you then click the back button is popped off this screen you were on is popped off.
    - And since you always see on the app the topmost screen you will see the screen below that which is thescreen you came from.

    navigation syntaxes :
        props.navigation.navigate({routeName: 'SomeIdentifier', params : {key:value}});
        props.navigation.navigate('SomeIdentifier');

    push, pop, replace :

    why push ?
    - let's say you're building an app like Dropbox where you have folders between which your users can navigate
    - if you're in a folder, you want to go to another folder.
    - Now each folder is the same folder screen technically, just with different content loaded into it. 
    - In such a case, you might want to go from folder A to B which uses the same component, the same screen in the end but with different content
    - you could use push to still be able to push that new screen which is the same screen onto the stack and load the same screen with different content.

    - navigationOptions in the config (2nd argument) of a navigator only matter if that navigator is used inside of another navigator.

State can be complex 
Redux :
    - import createStore from Redux to create a store in App.js
    - import combineReducers from Redux to combine reducers into 1 root reducer
    - import Provider from react-redux -> provide the store to the application (wrap the main component with <Provider>)
    - All about having a central store -> stores entire application state
    - useSelector (react-redux) ->    takes a function which automatically receives the state, the Redux state, as an input 
                        then returns whatever data you want to get from there